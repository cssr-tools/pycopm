# SPDX-FileCopyrightText: 2025 NORCE
# SPDX-License-Identifier: GPL-3.0
# pylint: disable=R0801,R0914

"""
Test on a complex model with a segmented well and faults.
The model is a modified sector from the Drogon data set:
https://github.com/OPM/opm-tests/tree/master/drogon/model/DROGON_HIST

This is generated by using pycopm and executing:
pycopm -i DROGON_HIST.DATA -o . -v 'opernum 2' -p 4 -l SECTOR -w MODEL3

and by following the steps for the different sections for the deck in:
https://cssr-tools.github.io/pycopm/examples.html#drogon

The added opernum in the REGIONS section corresponds to:
OPERNUM
104098*1 /
EQUALS
OPERNUM 2 30 38 47 52 2* /
/
"""

import os
import pathlib
import subprocess
import numpy as np
from resdata.resfile import ResdataFile

OPM = False
try:
    OPM = bool(__import__("opm"))
except ImportError:
    pass

testpth: pathlib.Path = pathlib.Path(__file__).parent
mainpth: pathlib.Path = pathlib.Path(__file__).parents[1]


def test_complex():
    """See examples/decks/MODEL3.DATA"""
    if not os.path.exists(f"{testpth}/output"):
        os.system(f"mkdir {testpth}/output")
    subprocess.run(
        [
            "flow",
            f"{mainpth}/examples/decks/MODEL3.DATA",
            f"--output-dir={testpth}/output/complex/reference",
        ],
        check=True,
    )
    readers = ["resdata"]
    if OPM:
        readers += ["opm"]
    for use in readers:
        sub = use.upper()
        subprocess.run(
            [
                "pycopm",
                "-o",
                f"{testpth}/output/complex",
                "-i",
                f"{mainpth}/examples/decks/MODEL3.DATA",
                "-x",
                "0,2,0,2,0,0,0,0,0,0",
                "-z",
                "0,2,2,0,2,2,0,2,2,0,2,2,0,2,2,0,2,2,0,2,2,0,2,2,0,2,2,0,2,2,2,0",
                "-w",
                f"COARSER{sub}",
                "-l",
                f"C0{sub}",
                "-p",
                "1",
                "-q",
                "1",
                "-a",
                "max",
                "-m",
                "all",
                "-u",
                use,
            ],
            check=True,
        )
        assert os.path.exists(f"{testpth}/output/complex/COARSER{sub}.INIT")
        assert os.path.exists(f"{testpth}/output/complex/COARSER{sub}.EGRID")
        subprocess.run(
            [
                "flow",
                f"{testpth}/output/complex/COARSER{sub}.DATA",
                f"--output-dir={testpth}/output/complex/coarser",
            ],
            check=True,
        )
        bini = ResdataFile(f"{testpth}/output/complex/reference/MODEL3.INIT")
        cini = ResdataFile(f"{testpth}/output/complex/coarser/COARSER{sub}.INIT")
        bpv = np.array(bini.iget_kw("PORV")[0])
        cpv = np.array(cini.iget_kw("PORV")[0])
        assert abs(sum(bpv) - sum(cpv)) < 50  # ca. 4.61992e8 porv in the ref
        assert sum(cpv > 0) == 255
        brst = ResdataFile(f"{testpth}/output/complex/reference/MODEL3.UNRST")
        crst = ResdataFile(f"{testpth}/output/complex/coarser/COARSER{sub}.UNRST")
        bgf = np.array(brst.iget_kw("FIPGAS")[0])
        cgf = np.array(crst.iget_kw("FIPGAS")[0])
        assert abs(sum(bgf) - sum(cgf)) < 50  # ca. 2.56191e10 fipgas in the ref
        for explicit in ["0", "1"]:
            sub = f"{explicit}{use.upper()}"
            subprocess.run(
                [
                    "pycopm",
                    "-o",
                    f"{testpth}/output/complex",
                    "-i",
                    f"{mainpth}/examples/decks/MODEL3.DATA",
                    "-warnings",
                    "1",
                    "-g",
                    "2,2,2",
                    "-w",
                    f"FINER{sub}",
                    "-l",
                    f"R0{sub}",
                    "-q",
                    "1",
                    "-m",
                    "all",
                    "-u",
                    use,
                    "-explicit",
                    explicit,
                ],
                check=True,
            )
            assert os.path.exists(f"{testpth}/output/complex/FINER{sub}.INIT")
            assert os.path.exists(f"{testpth}/output/complex/FINER{sub}.EGRID")
            subprocess.run(
                [
                    "flow",
                    f"{testpth}/output/complex/FINER{sub}.DATA",
                    f"--output-dir={testpth}/output/complex/finer",
                ],
                check=True,
            )
            rini = ResdataFile(f"{testpth}/output/complex/finer/FINER{sub}.INIT")
            rpv = np.array(rini.iget_kw("PORV")[0])
            assert abs(sum(bpv) - sum(rpv)) < 50  # ca. 4.61992e8 porv in the ref
            assert sum(rpv > 0) == 22896
            rrst = ResdataFile(f"{testpth}/output/complex/finer/FINER{sub}.UNRST")
            rgf = np.array(rrst.iget_kw("FIPGAS")[0])
            assert abs(sum(bgf) - sum(rgf)) < 3e2  # ca. 2.56191e10 fipgas in the ref
        for i, val in enumerate(
            ["diamond 0", "diamond 1", "diamondxy 3", "box [-3,2] [-1,1] [-1,2]"]
        ):
            sub = f"{i}{use.upper()}"
            subprocess.run(
                [
                    "pycopm",
                    "-o",
                    f"{testpth}/output/complex",
                    "-i",
                    f"{mainpth}/examples/decks/MODEL3.DATA",
                    "-v",
                    f"A4 {val}",
                    "-w",
                    f"SUBMODEL{sub}",
                    "-warnings",
                    "1",
                    "-l",
                    f"S{sub}",
                    "-p",
                    f"{[1,3,3,4][i]}",
                    "-m",
                    "deck_dry",
                    "-u",
                    use,
                ],
                check=True,
            )
            assert os.path.exists(f"{testpth}/output/complex/SUBMODEL{sub}.INIT")
            assert os.path.exists(f"{testpth}/output/complex/SUBMODEL{sub}.EGRID")
            bini = ResdataFile(f"{testpth}/output/complex/reference/MODEL3.INIT")
            cini = ResdataFile(f"{testpth}/output/complex/SUBMODEL{sub}.INIT")
            bpv = np.array(bini.iget_kw("PORV")[0])
            cpv = np.array(cini.iget_kw("PORV")[0])
            assert abs(sum(bpv) - sum(cpv)) < 50  # ca. 4.61992e8 porv in the ref
            assert sum(cpv > 0) == [20, 77, 151, 260][i]
